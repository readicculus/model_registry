#ckwg +28
# Copyright 2017 by Kitware, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither name of Kitware, Inc. nor the names of any contributors may be used
#    to endorse or promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from sprokit.pipeline import process
from kwiver.kwiver_process import KwiverProcess

from vital.types import Image
from vital.types import ImageContainer
from vital.types import DetectedObject
from vital.types import DetectedObjectSet
from vital.types import BoundingBox, ObjectTrackSet
import inspect

class track_set_to_object_set(KwiverProcess):
    """
    This process gets an image as input, does some stuff to it and
    sends the modified version to the output port.
    """
    # ----------------------------------------------
    def __init__(self, conf):
        KwiverProcess.__init__(self, conf)

        self.add_config_trait("example_param",
          "example_param",
          'Default Value',
          'Text to display to user.')

        self.declare_config_using_trait('example_param')

        # set up required flags
        optional = process.PortFlags()
        required = process.PortFlags()
        required.add(self.flag_required)

        #  declare our input port (port-name,flags)
        self.declare_input_port_using_trait('timestamp', required)
        self.declare_input_port_using_trait('object_track_set', required)
        self.declare_output_port_using_trait('detected_object_set', optional)

        # since viame gives us all tracks each time we just want to organize them by frame
        # on the first time _step is called.
        self.track_dict_initialized = False
        self.track_dict = {}

    # ----------------------------------------------
    def _configure(self):
        self.example_param = self.config_value('example_param')

        self._base_configure()

    def create_track_dict(self, object_track_set):
        if self.track_dict_initialized:
            return
        print("Initializing track dict")
        tracks = object_track_set.tracks()

        for i, track in enumerate(tracks):
            # t has .timestamp .tx .track_point .image_point .detection() 
            # det has .bounding_box() .type()
            # bbox has .min_x() .min_y() .max_x() .max_y())
            for t in track:
                det = t.detection()
                bbox = det.bounding_box()
                frame_id = t.frame_id
                if frame_id not in self.track_dict:
                    self.track_dict[frame_id] = DetectedObjectSet()
                
                # new_det = DetectedObject(bbox, 1.)
                self.track_dict[frame_id].add(det)

        self.track_dict_initialized = True
        print(self.track_dict)
        return

    # ----------------------------------------------
    def _step(self):
        # grab image container from port using traits
        ts = self.grab_input_using_trait('timestamp')
        object_track_set = self.grab_input_using_trait('object_track_set')
        current_frame_id = ts.get_frame()
        print('Frame %d' % current_frame_id)
        self.create_track_dict(object_track_set)


        # return the detected object set to the port
        if current_frame_id in self.track_dict:
            self.push_to_port_using_trait('detected_object_set', self.track_dict[current_frame_id])
        else:
            detections = DetectedObjectSet()
            self.push_to_port_using_trait('detected_object_set', detections)

        self._base_step()
