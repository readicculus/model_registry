def to_ObjectTrackSet(tracks):
    """Create an ObjectTrackSet from a dict whose keys are track IDs
    and values are lists of pairs of Kwiver timestamps and Kwiver DetectedObjects"""
    # Modeled after similar code in srnn_tracker.py
    result = []
    for tid, states in tracks.items():
        t = Track(id=tid)
        for ts, do in states:
            ots = ObjectTrackState(ts.get_frame(), ts.get_time_usec(), do)
            if not t.append(ots):
                raise ValueError("Unsorted input to to_ObjectTrackSet")
        result.append(t)
    return ObjectTrackSet(result)


from sprokit.pipeline import process
from kwiver.kwiver_process import KwiverProcess

from vital.types import Image
from vital.types import ImageContainer
from vital.types import DetectedObject
from vital.types import DetectedObjectSet
from vital.types import BoundingBox, ObjectTrackSet
import inspect

class merge_fixed_labels_with_detections(KwiverProcess):
    """
    This process gets an image as input, does some stuff to it and
    sends the modified version to the output port.
    """
    # ----------------------------------------------
    def __init__(self, conf):
        KwiverProcess.__init__(self, conf)

        self.add_config_trait("example_param",
          "example_param",
          'Default Value',
          'Text to display to user.')

        self.declare_config_using_trait('example_param')

        # set up required flags
        optional = process.PortFlags()
        required = process.PortFlags()
        required.add(self.flag_required)

        #  declare our input port (port-name,flags)
        self.declare_input_port_using_trait('fixed_detected_object_set', required)
        self.declare_input_port_using_trait('other_detected_object_set', required)
        self.declare_output_port_using_trait('detected_object_set', optional)

        # since viame gives us all tracks each time we just want to organize them by frame
        # on the first time _step is called.
        self.track_dict_initialized = False
        self.track_dict = {}
        self.track_dict_frame_id_to_index = {}

    # ----------------------------------------------
    def _configure(self):
        self.example_param = self.config_value('example_param')

        self._base_configure()

    def create_track_dict(self, object_track_set):
        if self.track_dict_initialized:
            return
        print("Initializing track dict")
        tracks = object_track_set.tracks()

        for i, track in enumerate(tracks):
            # track has ['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'all_frame_ids', 'append', 'back', 'find_state', 'first_frame', 'front', 'id', 'is_empty', 'last_frame', 'size']
            # t has .timestamp .tx .track_point .image_point .detection() 
            # det has .bounding_box() .type()
            # bbox has .min_x() .min_y() .max_x() .max_y())
            for t in track:
                print(dir(t))
                det = t.detection()
                bbox = det.bounding_box()
                frame_id = t.frame_id
                print(t.timestamp.get_frame())
                print(t.ts.get_frame())
                print(t.track_point())
                # print(t.image_point)
                print('Frame Id %d exists %s' % (frame_id, str(frame_id in self.track_dict)))
                if frame_id not in self.track_dict:
                    self.track_dict[frame_id] = DetectedObjectSet()
                self.track_dict_frame_id_to_index[i] = frame_id

                new_bbox = BoundingBox(bbox.min_x()-1,bbox.min_y()-1,bbox.max_x()+1,bbox.max_y()+1 )
                # print(bbox.min_x(),bbox.min_y(),bbox.max_x(),bbox.max_y())
                # print(new_bbox.min_x(),new_bbox.min_y(),new_bbox.max_x(),new_bbox.max_y())
                det.set_bounding_box(new_bbox)
                self.track_dict[frame_id].add(det)

        self.track_dict_initialized = True
        for frame_id, det_set in self.track_dict.items():
            print('Frame %d : %d input detections' % (frame_id, len(det_set)))
        # print(self.track_dict)
        # print(self.track_dict_frame_id_to_index)
        return

    # ----------------------------------------------
    def _step(self):
        # grab image container from port using traits
        ts = self.grab_input_using_trait('timestamp')
        object_track_set = self.grab_input_using_trait('object_track_set')
        current_frame_id = ts.get_frame()
        self.create_track_dict(object_track_set)

        print('=== Frame Id: %d ===' % current_frame_id)
        # return the detected object set to the port
        if current_frame_id in self.track_dict_frame_id_to_index:
            # print("index:" + str(current_frame_id))
            # print("frame_id: " + str(self.track_dict_frame_id_to_index[current_frame_id]))
            detected_object_set = self.track_dict[self.track_dict_frame_id_to_index[current_frame_id]]
            print("Detections: " + str(detected_object_set.size()))
            self.push_to_port_using_trait('detected_object_set', detected_object_set)
        else:
            print("No detections for frame " + str(current_frame_id))
            detections = DetectedObjectSet()
            self.push_to_port_using_trait('detected_object_set', detections)
        print("==================")
        self._base_step()


